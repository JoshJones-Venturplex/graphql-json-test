{
  "_args": [
    [
      {
        "raw": "prettier@^1.3.1",
        "scope": null,
        "escapedName": "prettier",
        "name": "prettier",
        "rawSpec": "^1.3.1",
        "spec": ">=1.3.1 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\Mingus\\Desktop\\Desktop\\Test Projects\\GraphQL-People-List\\node_modules\\express-graphql"
    ]
  ],
  "_from": "prettier@>=1.3.1 <2.0.0",
  "_id": "prettier@1.5.2",
  "_inCache": true,
  "_location": "/prettier",
  "_nodeVersion": "8.0.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/prettier-1.5.2.tgz_1498620848528_0.08143894304521382"
  },
  "_npmUser": {
    "name": "vjeux",
    "email": "vjeuxx@gmail.com"
  },
  "_npmVersion": "5.0.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "prettier@^1.3.1",
    "scope": null,
    "escapedName": "prettier",
    "name": "prettier",
    "rawSpec": "^1.3.1",
    "spec": ">=1.3.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/express-graphql"
  ],
  "_resolved": "https://registry.npmjs.org/prettier/-/prettier-1.5.2.tgz",
  "_shasum": "7ea0751da27b93bfb6cecfcec509994f52d83bb3",
  "_shrinkwrap": null,
  "_spec": "prettier@^1.3.1",
  "_where": "C:\\Users\\Mingus\\Desktop\\Desktop\\Test Projects\\GraphQL-People-List\\node_modules\\express-graphql",
  "author": {
    "name": "James Long"
  },
  "bin": {
    "prettier": "./bin/prettier.js"
  },
  "bugs": {
    "url": "https://github.com/prettier/prettier/issues"
  },
  "dependencies": {},
  "description": "Prettier is an opinionated JavaScript formatter",
  "devDependencies": {
    "babel-cli": "6.24.1",
    "babel-preset-es2015": "6.24.1",
    "cross-spawn": "5.1.0",
    "eslint": "3.19.0",
    "eslint-friendly-formatter": "3.0.0",
    "eslint-plugin-prettier": "2.1.1",
    "jest": "20.0.0",
    "mkdirp": "^0.5.1",
    "prettier": "1.4.2",
    "rimraf": "2.6.1",
    "rollup": "0.41.1",
    "rollup-plugin-commonjs": "7.0.0",
    "rollup-plugin-json": "2.1.0",
    "rollup-plugin-node-builtins": "2.0.0",
    "rollup-plugin-node-globals": "1.1.0",
    "rollup-plugin-node-resolve": "2.0.0",
    "rollup-plugin-replace": "1.1.1",
    "sw-toolbox": "3.6.0",
    "uglify-es": "3.0.15",
    "webpack": "2.6.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-f55mvineQ5yc36cLX4n4RWP6JH6MLcfi5f9MVsjpfBs4MVSG2GYT4v6cukzmvkIOvmNOdCZfDSMY3hQcMcDQbQ==",
    "shasum": "7ea0751da27b93bfb6cecfcec509994f52d83bb3",
    "tarball": "https://registry.npmjs.org/prettier/-/prettier-1.5.2.tgz"
  },
  "homepage": "https://github.com/prettier/prettier#readme",
  "jest": {
    "setupFiles": [
      "<rootDir>/tests_config/run_spec.js"
    ],
    "snapshotSerializers": [
      "<rootDir>/tests_config/raw-serializer.js"
    ],
    "testRegex": "jsfmt\\.spec\\.js$|__tests__/.*\\.js$",
    "testPathIgnorePatterns": [
      "tests/new_react",
      "tests/more_react"
    ]
  },
  "license": "MIT",
  "main": "./index.js",
  "maintainers": [
    {
      "name": "jlongster",
      "email": "longster@gmail.com"
    },
    {
      "name": "vjeux",
      "email": "vjeuxx@gmail.com"
    }
  ],
  "name": "prettier",
  "optionalDependencies": {},
  "readme": "# Prettier\n\n[![Gitter](https://badges.gitter.im/gitterHQ/gitter.svg)](https://gitter.im/jlongster/prettier)\n[![Build Status](https://travis-ci.org/prettier/prettier.svg?branch=master)](https://travis-ci.org/prettier/prettier)\n[![NPM version](https://img.shields.io/npm/v/prettier.svg)](https://www.npmjs.com/package/prettier)\n[![styled with prettier](https://img.shields.io/badge/styled_with-prettier-ff69b4.svg)](#badge)\n\nPrettier is an opinionated code formatter with support for:\n* JavaScript, including [ES2017](https://github.com/tc39/proposals/blob/master/finished-proposals.md)\n* [JSX](https://facebook.github.io/jsx/)\n* [Flow](https://flow.org/)\n* [TypeScript](https://www.typescriptlang.org/)\n* CSS, [LESS](http://lesscss.org/), and [SCSS](http://sass-lang.com)\n* [JSON](http://json.org/)\n* [GraphQL](http://graphql.org/)\n\nIt removes all original styling[\\*](#styling-footnote) and ensures that all outputted code\nconforms to a consistent style. (See this [blog post](http://jlongster.com/A-Prettier-Formatter))\n\n<details>\n<summary><strong>Table of Contents</strong></summary>\n\n* [What does Prettier do?](#what-does-prettier-do)\n* [Why Prettier?](#why-prettier)\n  + [Building and enforcing a style guide](#building-and-enforcing-a-style-guide)\n  + [Helping Newcomers](#helping-newcomers)\n  + [Writing code](#writing-code)\n  + [Easy to adopt](#easy-to-adopt)\n  + [Clean up an existing codebase](#clean-up-an-existing-codebase)\n  + [Ride the hype train](#ride-the-hype-train)\n* [How does it compare to ESLint (or TSLint, stylelint...)?](#how-does-it-compare-to-eslint-or-tslint-stylelint)\n* [Usage](#usage)\n  + [CLI](#cli)\n  + [ESLint](#eslint)\n  + [Pre-commit Hook](#pre-commit-hook)\n      * [Option 1. lint-staged](#option-1-lint-staged)\n      * [Option 2. pre-commit](#option-2-pre-commit)\n      * [Option 3. bash script](#option-3-bash-script)\n  + [API](#api)\n    - [`prettier.format`](#prettierformatsource--options)\n    - [`prettier.check`](#prettierchecksource--options)\n    - [`prettier.formatWithCursor`](#prettierformatwithcursorsource--options)\n    - [Custom Parser API](#custom-parser-api)\n  + [Excluding code from formatting](#excluding-code-from-formatting)\n* [Options](#options)\n  + [Print Width](#print-width)\n  + [Tab Width](#tab-width)\n  + [Tabs](#tabs)\n  + [Semicolons](#semicolons)\n  + [Quotes](#quotes)\n  + [Trailing Commas](#trailing-commas)\n  + [Bracket Spacing](#bracket-spacing)\n  + [JSX Brackets](#jsx-brackets)\n  + [Range](#range)\n  + [Parser](#parser)\n  + [Filepath](#filepath)\n* [Editor Integration](#editor-integration)\n  + [Atom](#atom)\n  + [Emacs](#emacs)\n  + [Vim](#vim)\n  + [Visual Studio Code](#visual-studio-code)\n  + [Visual Studio](#visual-studio)\n  + [Sublime Text](#sublime-text)\n  + [JetBrains WebStorm, PHPStorm, PyCharm...](#jetbrains-webstorm-phpstorm-pycharm)\n* [Language Support](#language-support)\n* [Related Projects](#related-projects)\n* [Technical Details](#technical-details)\n* [Badge](#badge)\n* [Contributing](#contributing)\n</details>\n\n--------------------------------------------------------------------------------\n\n## What does Prettier do?\n\nPrettier takes your code and reprints it from scratch by taking the line length into account.\n\nFor example, take the following code:\n\n```js\nfoo(arg1, arg2, arg3, arg4);\n```\n\nIt fits in a single line so it's going to stay as is. However, we've all run into this situation:\n\n```js\nfoo(reallyLongArg(), omgSoManyParameters(), IShouldRefactorThis(), isThereSeriouslyAnotherOne());\n```\n\nSuddenly our previous format for calling function breaks down because this is too long. Prettier is going to do the painstaking work of reprinting it like that for you:\n\n```js\nfoo(\n  reallyLongArg(),\n  omgSoManyParameters(),\n  IShouldRefactorThis(),\n  isThereSeriouslyAnotherOne()\n);\n```\n\nPrettier enforces a consistent code **style** (i.e. code formatting that won't affect the AST) across your entire codebase because it disregards the original styling[\\*](#styling-footnote) by parsing it away and re-printing the parsed AST with its own rules that take the maximum line length\ninto account, wrapping code when necessary.\n\n<a href=\"#styling-footnote\" name=\"styling-footnote\">\\*</a>_Well actually, some\noriginal styling is preserved when practical—see [empty lines] and [multi-line\nobjects]._\n\n[empty lines]:Rationale.md#empty-lines\n[multi-line objects]:Rationale.md#multi-line-objects\n\nIf you want to learn more, these two conference talks are great introductions:\n\n<a href=\"https://www.youtube.com/watch?v=hkfBvpEfWdA\"><img width=\"298\" src=\"https://cloud.githubusercontent.com/assets/197597/24886367/dda8a6f0-1e08-11e7-865b-22492450f10f.png\"></a> <a href=\"https://www.youtube.com/watch?v=0Q4kUNx85_4\"><img width=\"298\" src=\"https://cloud.githubusercontent.com/assets/197597/24886368/ddacd6f8-1e08-11e7-806a-9febd23cbf47.png\"></a>\n\n\n## Why Prettier?\n\n### Building and enforcing a style guide\n\nBy far the biggest reason for adopting Prettier is to stop all the on-going debates over styles. It is generally accepted that having a common style guide is valuable for a project and team but getting there is a very painful and unrewarding process. People get very emotional around particular ways of writing code and nobody likes spending time writing and receiving nits.\n- “We want to free mental threads and end discussions around style. While sometimes fruitful, these discussions are for the most part wasteful.”\n- “Literally had an engineer go through a huge effort of cleaning up all of our code because we were debating ternary style for the longest time and were inconsistent about it. It was dumb, but it was a weird on-going \"great debate\" that wasted lots of little back and forth bits. It's far easier for us all to agree now: just run Prettier, and go with that style.”\n- “Getting tired telling people how to style their product code.”\n- “Our top reason was to stop wasting our time debating style nits.”\n- “Having a githook set up has reduced the amount of style issues in PRs that result in broken builds due to ESLint rules or things I have to nit-pick or clean up later.”\n- “I don't want anybody to nitpick any other person ever again.”\n- “It reminds me of how Steve Jobs used to wear the same clothes every day because he has a million decisions to make and he didn't want to be bothered to make trivial ones like picking out clothes. I think Prettier is like that.”\n\n### Helping Newcomers\n\nPrettier is usually introduced by people with experience in the current codebase and JavaScript but the people that disproportionally benefit from it are newcomers to the codebase. One may think that it's only useful for people with very limited programming experience, but we've seen it quicken the ramp up time from experienced engineers joining the company, as they likely used a different coding style before, and developers coming from a different programming language.\n- “My motivations for using Prettier are: appearing that I know how to write JavaScript well.”\n- “I always put spaces in the wrong place, now I don't have to worry about it anymore.”\n- “When you're a beginner you're making a lot of mistakes caused by the syntax. Thanks to Prettier, you can reduce these mistakes and save a lot of time to focus on what really matters.”\n- “As a teacher, I will also tell to my students to install Prettier to help them to learn the JS syntax and have readable files.”\n\n### Writing code\n\nWhat usually happens once people are using Prettier is that they realize that they actually spend a lot of time and mental energy formatting their code. With Prettier editor integration, you can just press that magic key binding and poof, the code is formatted. This is an eye opening experience if anything else.\n- “I want to write code. Not spend cycles on formatting.”\n- “It removed 5% that sucks in our daily life - aka formatting”\n- “We're in 2017 and it's still painful to break a call into multiple lines when you happen to add an argument that makes it go over the 80 columns limit :(“\n\n### Easy to adopt\n\nWe've worked very hard to use the least controversial coding styles, went through many rounds of fixing all the edge cases and polished the getting started experience. When you're ready to push Prettier into your codebase, not only should it be painless for you to do it technically but the newly formatted codebase should not generate major controversy and be accepted painlessly by your co-workers.\n- “It's low overhead. We were able to throw Prettier at very different kinds of repos without much work.”\n- “It's been mostly bug free. Had there been major styling issues during the course of implementation we would have been wary about throwing this at our JS codebase. I'm happy to say that's not the case.”\n- “Everyone runs it as part of their pre commit scripts, a couple of us use the editor on save extensions as well.”\n- “It's fast, against one of our larger JS codebases we were able to run Prettier in under 13 seconds.”\n- “The biggest benefit for Prettier for us was being able to format the entire code base at once.”\n\n### Clean up an existing codebase\n\nSince coming up with a coding style and enforcing it is a big undertaking, it often slips through the cracks and you are left working on inconsistent codebases. Running Prettier in this case is a quick win, the codebase is now uniform and easier to read without spending hardly any time.\n- “Take a look at the code :) I just need to restore sanity.”\n- “We inherited a ~2000 module ES6 code base, developed by 20 different developers over 18 months, in a global team. Felt like such a win without much research.\n\n### Ride the hype train\n\nPurely technical aspects of the projects aren't the only thing people look into when choosing to adopt Prettier. Who built and uses it and how quickly it spreads through the community have a non trivial impact.\n- “The amazing thing, for me, is: 1) Announced 2 months ago. 2) Already adopted by, it seems, every major JS project. 3) 7000 stars, 100,000 npm downloads/mo”\n- “Was built by the same people as React & React Native.”\n- “I like to be part of the hot new things.”\n- “Because soon enough people are gonna ask for it.”\n\nA few of the [many projects](https://www.npmjs.com/browse/depended/prettier) using Prettier:\n\n<table>\n<tr>\n<td><p align=\"center\"><a href=\"https://facebook.github.io/react/\"><img src=\"images/react-200x100.png\" alt=\"React\" width=\"200\" height=\"100\"><br>React</a></p></td>\n<td><p align=\"center\"><a href=\"https://facebook.github.io/jest/\"><img src=\"images/jest-200x100.png\" alt=\"Jest\" width=\"200\" height=\"100\"><br>Jest</a></p></td>\n<td><p align=\"center\"><a href=\"https://yarnpkg.com\"><img src=\"images/yarn-200x100.png\" alt=\"Yarn\" width=\"200\" height=\"100\"><br>Yarn</a></p></td>\n</tr>\n<tr>\n<td><p align=\"center\"><a href=\"https://babeljs.io/\"><img src=\"images/babel-200x100.png\" alt=\"Babel\" width=\"200\" height=\"100\"><br>Babel</a></p></td>\n<td><p align=\"center\"><a href=\"https://zeit.co/\"><img src=\"images/zeit-200x100.png\" alt=\"Zeit\" width=\"200\" height=\"100\"><br>Zeit</a></p></td>\n<td><p align=\"center\"><a href=\"https://webpack.js.org/api/cli/\"><img src=\"images/webpack-200x100.png\" alt=\"Webpack-cli\" width=\"200\" height=\"100\"><br>Webpack-cli</a></p></td>\n</tr>\n</table>\n\n\n## How does it compare to ESLint (or TSLint, stylelint...)?\n\nLinters have two categories of rules:\n\n**Formatting rules**: eg: [max-len](http://eslint.org/docs/rules/max-len), [no-mixed-spaces-and-tabs](http://eslint.org/docs/rules/no-mixed-spaces-and-tabs), [keyword-spacing](http://eslint.org/docs/rules/keyword-spacing), [comma-style](http://eslint.org/docs/rules/comma-style)...\n\nPrettier makes this whole category of rules not needed anymore! Prettier is going to reprint the entire program from scratch in a consistent way, so it's not possible for the programmer to make a mistake there anymore :)\n\n**Code-quality rules**: eg [no-unused-vars](http://eslint.org/docs/rules/no-unused-vars), [no-extra-bind](http://eslint.org/docs/rules/no-extra-bind), [no-implicit-globals](http://eslint.org/docs/rules/no-implicit-globals), [prefer-promise-reject-errors](http://eslint.org/docs/rules/prefer-promise-reject-errors)...\n\nPrettier does nothing to help with those kind of rules. They are also the most important ones provided by linters as they are likely to catch real bugs with your code!\n\n\n## Usage\n\nInstall:\n\n```\nyarn add prettier --dev\n```\n\nYou can install it globally if you like:\n\n```\nyarn global add prettier\n```\n\n*We're using `yarn` but you can use `npm` if you like:*\n\n```\nnpm install [--save-dev|--global] prettier\n```\n\n### CLI\n\nRun Prettier through the CLI with this script. Run it without any\narguments to see the [options](#options).\n\nTo format a file in-place, use `--write`. You may want to consider\ncommitting your code before doing that, just in case.\n\n```bash\nprettier [opts] [filename ...]\n```\n\nIn practice, this may look something like:\n\n```bash\nprettier --single-quote --trailing-comma es5 --write \"{app,__{tests,mocks}__}/**/*.js\"\n```\n\nDon't forget the quotes around the globs! The quotes make sure that Prettier\nexpands the globs rather than your shell, for cross-platform usage.\nThe [glob syntax from the glob module](https://github.com/isaacs/node-glob/blob/master/README.md#glob-primer)\nis used.\n\nPrettier CLI will ignore files located in `node_modules` directory. To opt-out from this behavior use `--with-node-modules` flag.\n\nIf you're worried that Prettier will change the correctness of your code, add `--debug-check` to the command.\nThis will cause Prettier to print an error message if it detects that code correctness might have changed.\nNote that `--write` cannot be used with `--debug-check`.\n\nAnother useful flag is `--list-different` (or `-l`) which prints the filenames of files that are different from Prettier formatting. If there are differences the script errors out, which is useful in a CI scenario.\n\n```bash\nprettier --single-quote --list-different \"src/**/*.js\"\n```\n\n### ESLint\n\nIf you are using ESLint, integrating Prettier to your workflow is straightforward:\n\nJust add Prettier as an ESLint rule using [eslint-plugin-prettier](https://github.com/prettier/eslint-plugin-prettier).\n\n```js\nyarn add --dev prettier eslint-plugin-prettier\n\n// .eslintrc\n{\n  \"plugins\": [\n    \"prettier\"\n  ],\n  \"rules\": {\n    \"prettier/prettier\": \"error\"\n  }\n}\n```\n\nWe also recommend that you use [eslint-config-prettier](https://github.com/prettier/eslint-config-prettier) to disable all the existing formatting rules. It's a one liner that can be added on-top of any existing ESLint configuration.\n\n```\n$ yarn add --dev eslint-config-prettier\n```\n\n.eslintrc.json:\n\n```json\n{\n  \"extends\": [\n    \"prettier\"\n  ]\n}\n```\n\n\n### Pre-commit Hook\n\nYou can use Prettier with a pre-commit tool. This can re-format your files that are marked as \"staged\" via `git add` before you commit.\n\n##### Option 1. [lint-staged](https://github.com/okonet/lint-staged)\n\nInstall it along with [husky](https://github.com/typicode/husky):\n\n```bash\nyarn add lint-staged husky --dev\n```\n\nand add this config to your `package.json`:\n\n```json\n{\n  \"scripts\": {\n    \"precommit\": \"lint-staged\"\n  },\n  \"lint-staged\": {\n    \"*.js\": [\n      \"prettier --write\",\n      \"git add\"\n    ]\n  }\n}\n```\n\nSee https://github.com/okonet/lint-staged#configuration for more details about how you can configure lint-staged.\n\n\n##### Option 2. [pre-commit](https://github.com/pre-commit/pre-commit)\n\nCopy the following config in your pre-commit config yaml file:\n\n```yaml\n\n    -   repo: https://github.com/awebdeveloper/pre-commit-prettier\n        sha: ''  # Use the sha or tag you want to point at\n        hooks:\n        -   id: prettier\n            additional_dependencies: ['prettier@1.4.2']\n\n ```\n\nFind more info from [here](https://github.com/awebdeveloper/pre-commit-prettier).\n\n##### Option 3. bash script\n\nAlternately you can save this script as `.git/hooks/pre-commit` and give it execute permission:\n\n```bash\n#!/bin/sh\njsfiles=$(git diff --cached --name-only --diff-filter=ACM | grep '\\.jsx\\?$' | tr '\\n' ' ')\n[ -z \"$jsfiles\" ] && exit 0\n\ndiffs=$(node_modules/.bin/prettier -l $jsfiles)\n[ -z \"$diffs\" ] && exit 0\n\necho \"here\"\necho >&2 \"Javascript files must be formatted with Prettier. Please run:\"\necho >&2 \"node_modules/.bin/prettier --write \"$diffs\"\"\n\nexit 1\n```\n\n### API\n\nThe API has three functions:  `format`, `check`, and `formatWithCursor`.\n\n```js\nconst prettier = require(\"prettier\");\n```\n\n#### `prettier.format(source [, options])`\n\n`format` is used to format text using Prettier. [Options](#options) may be provided to override the defaults.\n\n```js\nprettier.format(\"foo ( );\", { semi: false });\n// -> \"foo()\"\n```\n\n#### `prettier.check(source [, options])`\n\n`check` checks to see if the file has been formatted with Prettier given those options and returns a `Boolean`.\nThis is similar to the `--list-different` parameter in the CLI and is useful for running Prettier in CI scenarios.\n\n#### `prettier.formatWithCursor(source [, options])`\n\n`formatWithCursor` both formats the code, and translates a cursor position from unformatted code to formatted code.\nThis is useful for editor integrations, to prevent the cursor from moving when code is formatted.\n\nThe `cursorOffset` option should be provided, to specify where the cursor is. This option cannot be used with `rangeStart` and `rangeEnd`.\n\n```js\nprettier.formatWithCursor(\" 1\", { cursorOffset: 2 });\n// -> { formatted: '1;\\n', cursorOffset: 1 }\n```\n\n#### Custom Parser API\n\nIf you need to make modifications to the AST (such as codemods), or you want to provide an alternate parser, you can do so by setting the `parser` option to a function. The function signature of the parser function is:\n```js\n(text: string, parsers: object, options: object) => AST;\n```\n\nPrettier's built-in parsers are exposed as properties on the `parsers` argument.\n\n```js\nprettier.format(\"lodash ( )\", {\n  parser(text, { babylon }) {\n    const ast = babylon(text);\n    ast.program.body[0].expression.callee.name = \"_\";\n    return ast;\n  }\n});\n// -> \"_();\\n\"\n```\n\nThe `--parser` CLI option may be a path to a node.js module exporting a parse function.\n\n### Excluding code from formatting\n\nA JavaScript comment of `// prettier-ignore` will exclude the next node in the abstract syntax tree from formatting.\n\nFor example:\n\n```js\nmatrix(\n  1, 0, 0,\n  0, 1, 0,\n  0, 0, 1\n)\n\n// prettier-ignore\nmatrix(\n  1, 0, 0,\n  0, 1, 0,\n  0, 0, 1\n)\n```\n\nwill be transformed to:\n\n```js\nmatrix(1, 0, 0, 0, 1, 0, 0, 0, 1);\n\n// prettier-ignore\nmatrix(\n  1, 0, 0,\n  0, 1, 0,\n  0, 0, 1\n)\n```\n\n## Options\nPrettier ships with a handful of customizable format options, usable in both the CLI and API.\n\n### Print Width\nSpecify the length of line that the printer will wrap on.\n\n**We strongly recommend against using more than 80 columns.**\n\nPrettier works by cramming as much content as possible until it reaches the limit, which happens to work well for 80 columns but makes lines that are very crowded. When a bigger column count is used in styleguides, it usually means that code is allowed to go beyond 80 columns, but not to make every single line go there, like Prettier would do.\n\nDefault | CLI Override | API Override\n--------|--------------|-------------\n`80` | `--print-width <int>` | `printWidth: <int>`\n\n### Tab Width\nSpecify the number of spaces per indentation-level.\n\nDefault | CLI Override | API Override\n--------|--------------|-------------\n `2` | `--tab-width <int>` | `tabWidth: <int>`\n\n### Tabs\nIndent lines with tabs instead of spaces\n\nDefault | CLI Override | API Override\n--------|--------------|-------------\n`false` | `--use-tabs` | `useTabs: <bool>`\n\n### Semicolons\nPrint semicolons at the ends of statements.\n\nValid options:\n\n * `true` - Add a semicolon at the end of every statement.\n * `false` - Only add semicolons at the beginning of lines that may introduce ASI failures.\n\nDefault | CLI Override | API Override\n--------|--------------|-------------\n`true` | `--no-semi` | `semi: <bool>`\n\n### Quotes\nUse single quotes instead of double quotes.\n\nNotes:\n* Quotes in JSX will always be double and ignore this setting.\n* If the number of quotes outweighs the other quote, the quote which is less used will be used to format the string - Example: `\"I'm double quoted\"` results in `\"I'm double quoted\"` and `\"This \\\"example\\\" is single quoted\"` results in `'This \"example\" is single quoted'`.\n\nDefault | CLI Override | API Override\n--------|--------------|-------------\n`false` |  `--single-quote` | `singleQuote: <bool>`\n\n### Trailing Commas\nPrint trailing commas wherever possible.\n\nValid options:\n * `\"none\"` - No trailing commas.\n * `\"es5\"` - Trailing commas where valid in ES5 (objects, arrays, etc.)\n * `\"all\"` - Trailing commas wherever possible (function arguments). This requires node 8 or a [transform](https://babeljs.io/docs/plugins/syntax-trailing-function-commas/).\n\nDefault | CLI Override | API Override\n--------|--------------|-------------\n`\"none\"` | <code>--trailing-comma <none&#124;es5&#124;all></code> | <code>trailingComma: \"<none&#124;es5&#124;all>\"</code>\n\n### Bracket Spacing\nPrint spaces between brackets in object literals.\n\nValid options:\n * `true` - Example: `{ foo: bar }`.\n * `false` - Example: `{foo: bar}`.\n\nDefault | CLI Override | API Override\n--------|--------------|-------------\n`true` | `--no-bracket-spacing` | `bracketSpacing: <bool>`\n\n### JSX Brackets\nPut the `>` of a multi-line JSX element at the end of the last line instead of being alone on the next line.\n\nDefault | CLI Override | API Override\n--------|--------------|-------------\n`false` | `--jsx-bracket-same-line` | `jsxBracketSameLine: <bool>`\n\n### Range\nFormat only a segment of a file.\n\nThese two options can be used to format code starting and ending at a given character offset (inclusive and exclusive, respectively). The range will extend:\n* Backwards to the start of the first line containing the selected statement.\n* Forwards to the end of the selected statement.\n\nThese options cannot be used with `cursorOffset`.\n\nDefault | CLI Override | API Override\n--------|--------------|-------------\n`0`        | `--range-start <int>`| `rangeStart: <int>`\n`Infinity` | `--range-end <int>`  | `rangeEnd: <int>`\n\n### Parser\nSpecify which parser to use.\n\nBoth the `babylon` and `flow` parsers support the same set of JavaScript features (including Flow). Prettier automatically infers the parser from the input file path, so you shouldn't have to change this setting.\n\nBuilt-in parsers:\n * [`babylon`](https://github.com/babel/babylon/)\n * [`flow`](https://github.com/facebook/flow/tree/master/src/parser)\n * [`typescript`](https://github.com/eslint/typescript-eslint-parser) _Since v1.4.0_\n * [`postcss`](https://github.com/postcss/postcss) _Since v1.4.0_\n * [`json`](https://github.com/vtrushin/json-to-ast) _Since v1.5.0_\n * [`graphql`](https://github.com/graphql/graphql-js/tree/master/src/language) _Since v1.5.0_\n\n[Custom parsers](#custom-parser-api) are also supported.  _Since v1.5.0_\n\nDefault | CLI Override | API Override\n--------|--------------|-------------\n`babylon` | `--parser <string>`<br />`--parser ./my-parser` | `parser: \"<string>\"`<br />`parser: require(\"./my-parser\")`\n\n### Filepath\nSpecify the input filepath. This will be used to do parser inference.\n\nFor example, the following will use `postcss` parser:\n\n```bash\ncat foo | prettier --stdin-filepath foo.css\n```\n\nDefault | CLI Override | API Override\n--------|--------------|-------------\nNone | `--stdin-filepath <string>` | `filepath: \"<string>\"`\n\n\n## Editor Integration\n\n### Atom\n\nAtom users can simply install the [prettier-atom](https://github.com/prettier/prettier-atom) package and use\n`Ctrl+Alt+F` to format a file (or format on save if enabled).\n\n### Emacs\n\nEmacs users should see [this repository](https://github.com/prettier/prettier-emacs)\nfor on-demand formatting.\n\n### Vim\n\nVim users can simply install either [sbdchd](https://github.com/sbdchd)/[neoformat](https://github.com/sbdchd/neoformat) or [mitermayer](https://github.com/mitermayer)/[vim-prettier](https://github.com/mitermayer/vim-prettier), for more details see [this directory](https://github.com/prettier/prettier/tree/master/editors/vim)\n\n### Visual Studio Code\n\nCan be installed using the extension sidebar. Search for `Prettier - JavaScript formatter`.\n\nCan also be installed using `ext install prettier-vscode`.\n\n[Check its repository for configuration and shortcuts](https://github.com/esbenp/prettier-vscode)\n\n### Visual Studio\n\nInstall the [JavaScript Prettier extension](https://github.com/madskristensen/JavaScriptPrettier).\n\n### Sublime Text\n\nSublime Text support is available through Package Control and\nthe [JsPrettier](https://packagecontrol.io/packages/JsPrettier) plug-in.\n\n### JetBrains WebStorm, PHPStorm, PyCharm...\n\nSee the [WebStorm\nguide](https://github.com/jlongster/prettier/tree/master/editors/webstorm/README.md).\n\n## Language Support\n\nPrettier attempts to support all JavaScript language features,\nincluding non-standardized ones. By default it uses the\n[Babylon](https://github.com/babel/babylon) parser with all language\nfeatures enabled, but you can also use the\n[Flow](https://github.com/facebook/flow) parser with the\n`parser` API or `--parser` CLI [option](#options).\n\nAll of JSX and Flow syntax is supported. In fact, the test suite in\n`tests` *is* the entire Flow test suite and they all pass.\n\nPrettier also supports [TypeScript](https://www.typescriptlang.org/), CSS, [LESS](http://lesscss.org/), [SCSS](http://sass-lang.com), [JSON](http://json.org/), and [GraphQL](http://graphql.org/).\n\nThe minimum version of TypeScript supported is 2.1.3 as it introduces the ability to have leading `|` for type definitions which prettier outputs.\n\n## Related Projects\n\n- [`eslint-plugin-prettier`](https://github.com/prettier/eslint-plugin-prettier) plugs Prettier into your ESLint workflow\n- [`eslint-config-prettier`](https://github.com/prettier/eslint-config-prettier) turns off all ESLint rules that are unnecessary or might conflict with Prettier\n- [`prettier-eslint`](https://github.com/prettier/prettier-eslint)\npasses `prettier` output to `eslint --fix`\n- [`prettier-standard`](https://github.com/sheerun/prettier-standard)\nuses `prettier` and `prettier-eslint` to format code with standard rules\n- [`prettier-standard-formatter`](https://github.com/dtinth/prettier-standard-formatter)\npasses `prettier` output to `standard --fix`\n- [`prettier-miscellaneous`](https://github.com/arijs/prettier-miscellaneous)\n`prettier` with a few minor extra options\n- [`neutrino-preset-prettier`](https://github.com/SpencerCDixon/neutrino-preset-prettier) allows you to use Prettier as a Neutrino preset\n- [`prettier_d`](https://github.com/josephfrazier/prettier_d.js) runs Prettier as a server to avoid Node.js startup delay\n- [`Prettier Bookmarklet`](https://prettier.glitch.me/) provides a bookmarklet and exposes a REST API for Prettier that allows to format CodeMirror editor in your browser\n- [`prettier-github`](https://github.com/jgierer12/prettier-github) formats code in GitHub comments\n\n## Technical Details\n\nThis printer is a fork of\n[recast](https://github.com/benjamn/recast)'s printer with its\nalgorithm replaced by the one described by Wadler in \"[A prettier\nprinter](http://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf)\".\nThere still may be leftover code from recast that needs to be cleaned\nup.\n\nThe basic idea is that the printer takes an AST and returns an\nintermediate representation of the output, and the printer uses that\nto generate a string. The advantage is that the printer can \"measure\"\nthe IR and see if the output is going to fit on a line, and break if\nnot.\n\nThis means that most of the logic of printing an AST involves\ngenerating an abstract representation of the output involving certain\ncommands. For example, `concat([\"(\", line, arg, line \")\"])` would\nrepresent a concatenation of opening parens, an argument, and closing\nparens. But if that doesn't fit on one line, the printer can break\nwhere `line` is specified.\n\nMore (rough) details can be found in [commands.md](commands.md).\n\n## Badge\n\nShow the world you're using *Prettier* → [![styled with prettier](https://img.shields.io/badge/styled_with-prettier-ff69b4.svg)](https://github.com/prettier/prettier)\n\n```md\n[![styled with prettier](https://img.shields.io/badge/styled_with-prettier-ff69b4.svg)](https://github.com/prettier/prettier)\n```\n\n## Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/prettier/prettier.git"
  },
  "scripts": {
    "build": "./scripts/build/build.sh",
    "lint": "EFF_NO_LINK_RULES=true eslint . --format 'node_modules/eslint-friendly-formatter'",
    "test": "jest",
    "test-integration": "jest tests_integration"
  },
  "version": "1.5.2"
}
